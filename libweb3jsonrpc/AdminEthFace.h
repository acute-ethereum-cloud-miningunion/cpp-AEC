/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_DEV_RPC_ADMINaecFACE_H_
#define JSONRPC_CPP_STUB_DEV_RPC_ADMINaecFACE_H_

#include "ModularServer.h"

namespace dev {
    namespace rpc {
        class AdminaecFace : public ServerInterface<AdminaecFace>
        {
            public:
                AdminaecFace()
                {
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_blockQueueStatus", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_blockQueueStatusI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_setAskPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_setAskPriceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_setBidPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_setBidPriceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_setMining", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_BOOLEAN,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_setMiningI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_findBlock", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_findBlockI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_blockQueueFirstUnknown", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_blockQueueFirstUnknownI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_blockQueueRetryUnknown", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_blockQueueRetryUnknownI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_allAccounts", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_allAccountsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_newAccount", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_OBJECT,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_newAccountI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_setMiningBenefactor", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_setMiningBenefactorI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_inspect", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_inspectI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_reprocess", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_reprocessI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_vmTrace", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_INTEGER,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_vmTraceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("admin_aec_getReceiptByHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_INTEGER,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::admin_aec_getReceiptByHashAndIndexI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_start", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_INTEGER, NULL), &dev::rpc::AdminaecFace::miner_startI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_stop", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::AdminaecFace::miner_stopI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_setaecerbase", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::miner_setaecerbaseI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_setExtra", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::miner_setExtraI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_setGasPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::AdminaecFace::miner_setGasPriceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("miner_hashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::AdminaecFace::miner_hashrateI);
                }

                inline virtual void admin_aec_blockQueueStatusI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_blockQueueStatus(request[0u].asString());
                }
                inline virtual void admin_aec_setAskPriceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_setAskPrice(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_setBidPriceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_setBidPrice(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_setMiningI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_setMining(request[0u].asBool(), request[1u].asString());
                }
                inline virtual void admin_aec_findBlockI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_findBlock(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_blockQueueFirstUnknownI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_blockQueueFirstUnknown(request[0u].asString());
                }
                inline virtual void admin_aec_blockQueueRetryUnknownI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_blockQueueRetryUnknown(request[0u].asString());
                }
                inline virtual void admin_aec_allAccountsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_allAccounts(request[0u].asString());
                }
                inline virtual void admin_aec_newAccountI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_newAccount(request[0u], request[1u].asString());
                }
                inline virtual void admin_aec_setMiningBenefactorI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_setMiningBenefactor(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_inspectI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_inspect(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_reprocessI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_reprocess(request[0u].asString(), request[1u].asString());
                }
                inline virtual void admin_aec_vmTraceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_vmTrace(request[0u].asString(), request[1u].asInt(), request[2u].asString());
                }
                inline virtual void admin_aec_getReceiptByHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->admin_aec_getReceiptByHashAndIndex(request[0u].asString(), request[1u].asInt(), request[2u].asString());
                }
                inline virtual void miner_startI(const Json::Value &request, Json::Value &response)
                {
                    response = this->miner_start(request[0u].asInt());
                }
                inline virtual void miner_stopI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->miner_stop();
                }
                inline virtual void miner_setaecerbaseI(const Json::Value &request, Json::Value &response)
                {
                    response = this->miner_setaecerbase(request[0u].asString());
                }
                inline virtual void miner_setExtraI(const Json::Value &request, Json::Value &response)
                {
                    response = this->miner_setExtra(request[0u].asString());
                }
                inline virtual void miner_setGasPriceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->miner_setGasPrice(request[0u].asString());
                }
                inline virtual void miner_hashrateI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->miner_hashrate();
                }
                virtual Json::Value admin_aec_blockQueueStatus(const std::string& param1) = 0;
                virtual bool admin_aec_setAskPrice(const std::string& param1, const std::string& param2) = 0;
                virtual bool admin_aec_setBidPrice(const std::string& param1, const std::string& param2) = 0;
                virtual bool admin_aec_setMining(bool param1, const std::string& param2) = 0;
                virtual Json::Value admin_aec_findBlock(const std::string& param1, const std::string& param2) = 0;
                virtual std::string admin_aec_blockQueueFirstUnknown(const std::string& param1) = 0;
                virtual bool admin_aec_blockQueueRetryUnknown(const std::string& param1) = 0;
                virtual Json::Value admin_aec_allAccounts(const std::string& param1) = 0;
                virtual Json::Value admin_aec_newAccount(const Json::Value& param1, const std::string& param2) = 0;
                virtual bool admin_aec_setMiningBenefactor(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value admin_aec_inspect(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value admin_aec_reprocess(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value admin_aec_vmTrace(const std::string& param1, int param2, const std::string& param3) = 0;
                virtual Json::Value admin_aec_getReceiptByHashAndIndex(const std::string& param1, int param2, const std::string& param3) = 0;
                virtual bool miner_start(int param1) = 0;
                virtual bool miner_stop() = 0;
                virtual bool miner_setaecerbase(const std::string& param1) = 0;
                virtual bool miner_setExtra(const std::string& param1) = 0;
                virtual bool miner_setGasPrice(const std::string& param1) = 0;
                virtual std::string miner_hashrate() = 0;
        };

    }
}
#endif //JSONRPC_CPP_STUB_DEV_RPC_ADMINaecFACE_H_
