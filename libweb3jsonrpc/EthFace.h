/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_DEV_RPC_aecFACE_H_
#define JSONRPC_CPP_STUB_DEV_RPC_aecFACE_H_

#include "ModularServer.h"

namespace dev {
    namespace rpc {
        class aecFace : public ServerInterface<aecFace>
        {
            public:
                aecFace()
                {
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_protocolVersion", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_protocolVersionI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_hashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_hashrateI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_coinbase", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_coinbaseI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_mining", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::aecFace::aec_miningI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_gasPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_gasPriceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_accounts", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::aecFace::aec_accountsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_blockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_blockNumberI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getBalance", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getBalanceI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getStorageAt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getStorageAtI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getStorageRoot", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getStorageRootI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getTransactionCount", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getTransactionCountI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_pendingTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::aecFace::aec_pendingTransactionsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getBlockTransactionCountByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getBlockTransactionCountByHashI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getBlockTransactionCountByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getBlockTransactionCountByNumberI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getUncleCountByBlockHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getUncleCountByBlockHashI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getUncleCountByBlockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getUncleCountByBlockNumberI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getCode", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getCodeI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_sendTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_sendTransactionI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_call", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_callI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_flush", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::aecFace::aec_flushI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getBlockByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::aecFace::aec_getBlockByHashI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getBlockByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::aecFace::aec_getBlockByNumberI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getTransactionByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getTransactionByHashI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getTransactionByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getTransactionByBlockHashAndIndexI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getTransactionByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getTransactionByBlockNumberAndIndexI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getTransactionReceipt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getTransactionReceiptI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getUncleByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getUncleByBlockHashAndIndexI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getUncleByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getUncleByBlockNumberAndIndexI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_newFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_newFilterI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_newFilterEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_newFilterExI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_newBlockFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_newBlockFilterI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_newPendingTransactionFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_newPendingTransactionFilterI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_uninstallFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_uninstallFilterI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getFilterChanges", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getFilterChangesI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getFilterChangesEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getFilterChangesExI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getFilterLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getFilterLogsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getFilterLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_getFilterLogsExI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_getLogsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_getLogsExI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_getWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::aecFace::aec_getWorkI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_submitWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_submitWorkI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_submitHashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_submitHashrateI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_register", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_registerI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_unregister", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_unregisterI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_fetchQueuedTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_fetchQueuedTransactionsI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_signTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_signTransactionI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_inspectTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_inspectTransactionI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_sendRawTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_sendRawTransactionI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_notePassword", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::aecFace::aec_notePasswordI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_syncing", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT,  NULL), &dev::rpc::aecFace::aec_syncingI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_estimateGas", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::aecFace::aec_estimateGasI);
                    this->bindAndAddMaecod(jsonrpc::Procedure("aec_chainId", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::aecFace::aec_chainIdI);
                }

                inline virtual void aec_protocolVersionI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_protocolVersion();
                }
                inline virtual void aec_hashrateI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_hashrate();
                }
                inline virtual void aec_coinbaseI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_coinbase();
                }
                inline virtual void aec_miningI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_mining();
                }
                inline virtual void aec_gasPriceI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_gasPrice();
                }
                inline virtual void aec_accountsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_accounts();
                }
                inline virtual void aec_blockNumberI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_blockNumber();
                }
                inline virtual void aec_getBalanceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getBalance(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_getStorageAtI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getStorageAt(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void aec_getStorageRootI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getStorageRoot(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_getTransactionCountI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getTransactionCount(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_pendingTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_pendingTransactions();
                }
                inline virtual void aec_getBlockTransactionCountByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getBlockTransactionCountByHash(request[0u].asString());
                }
                inline virtual void aec_getBlockTransactionCountByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getBlockTransactionCountByNumber(request[0u].asString());
                }
                inline virtual void aec_getUncleCountByBlockHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getUncleCountByBlockHash(request[0u].asString());
                }
                inline virtual void aec_getUncleCountByBlockNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getUncleCountByBlockNumber(request[0u].asString());
                }
                inline virtual void aec_getCodeI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getCode(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_sendTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_sendTransaction(request[0u]);
                }
                inline virtual void aec_callI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_call(request[0u], request[1u].asString());
                }
                inline virtual void aec_flushI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_flush();
                }
                inline virtual void aec_getBlockByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getBlockByHash(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void aec_getBlockByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getBlockByNumber(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void aec_getTransactionByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getTransactionByHash(request[0u].asString());
                }
                inline virtual void aec_getTransactionByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getTransactionByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_getTransactionByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getTransactionByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_getTransactionReceiptI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getTransactionReceipt(request[0u].asString());
                }
                inline virtual void aec_getUncleByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getUncleByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_getUncleByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getUncleByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_newFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_newFilter(request[0u]);
                }
                inline virtual void aec_newFilterExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_newFilterEx(request[0u]);
                }
                inline virtual void aec_newBlockFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_newBlockFilter();
                }
                inline virtual void aec_newPendingTransactionFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_newPendingTransactionFilter();
                }
                inline virtual void aec_uninstallFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_uninstallFilter(request[0u].asString());
                }
                inline virtual void aec_getFilterChangesI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getFilterChanges(request[0u].asString());
                }
                inline virtual void aec_getFilterChangesExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getFilterChangesEx(request[0u].asString());
                }
                inline virtual void aec_getFilterLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getFilterLogs(request[0u].asString());
                }
                inline virtual void aec_getFilterLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getFilterLogsEx(request[0u].asString());
                }
                inline virtual void aec_getLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getLogs(request[0u]);
                }
                inline virtual void aec_getLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_getLogsEx(request[0u]);
                }
                inline virtual void aec_getWorkI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_getWork();
                }
                inline virtual void aec_submitWorkI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_submitWork(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void aec_submitHashrateI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_submitHashrate(request[0u].asString(), request[1u].asString());
                }
                inline virtual void aec_registerI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_register(request[0u].asString());
                }
                inline virtual void aec_unregisterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_unregister(request[0u].asString());
                }
                inline virtual void aec_fetchQueuedTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_fetchQueuedTransactions(request[0u].asString());
                }
                inline virtual void aec_signTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_signTransaction(request[0u]);
                }
                inline virtual void aec_inspectTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_inspectTransaction(request[0u].asString());
                }
                inline virtual void aec_sendRawTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_sendRawTransaction(request[0u].asString());
                }
                inline virtual void aec_notePasswordI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_notePassword(request[0u].asString());
                }
                inline virtual void aec_syncingI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_syncing();
                }
                inline virtual void aec_estimateGasI(const Json::Value &request, Json::Value &response)
                {
                    response = this->aec_estimateGas(request[0u]);
                }
                inline virtual void aec_chainIdI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->aec_chainId();
                }
                virtual std::string aec_protocolVersion() = 0;
                virtual std::string aec_hashrate() = 0;
                virtual std::string aec_coinbase() = 0;
                virtual bool aec_mining() = 0;
                virtual std::string aec_gasPrice() = 0;
                virtual Json::Value aec_accounts() = 0;
                virtual std::string aec_blockNumber() = 0;
                virtual std::string aec_getBalance(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aec_getStorageAt(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual std::string aec_getStorageRoot(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aec_getTransactionCount(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aec_pendingTransactions() = 0;
                virtual Json::Value aec_getBlockTransactionCountByHash(const std::string& param1) = 0;
                virtual Json::Value aec_getBlockTransactionCountByNumber(const std::string& param1) = 0;
                virtual Json::Value aec_getUncleCountByBlockHash(const std::string& param1) = 0;
                virtual Json::Value aec_getUncleCountByBlockNumber(const std::string& param1) = 0;
                virtual std::string aec_getCode(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aec_sendTransaction(const Json::Value& param1) = 0;
                virtual std::string aec_call(const Json::Value& param1, const std::string& param2) = 0;
                virtual bool aec_flush() = 0;
                virtual Json::Value aec_getBlockByHash(const std::string& param1, bool param2) = 0;
                virtual Json::Value aec_getBlockByNumber(const std::string& param1, bool param2) = 0;
                virtual Json::Value aec_getTransactionByHash(const std::string& param1) = 0;
                virtual Json::Value aec_getTransactionByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aec_getTransactionByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aec_getTransactionReceipt(const std::string& param1) = 0;
                virtual Json::Value aec_getUncleByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value aec_getUncleByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aec_newFilter(const Json::Value& param1) = 0;
                virtual std::string aec_newFilterEx(const Json::Value& param1) = 0;
                virtual std::string aec_newBlockFilter() = 0;
                virtual std::string aec_newPendingTransactionFilter() = 0;
                virtual bool aec_uninstallFilter(const std::string& param1) = 0;
                virtual Json::Value aec_getFilterChanges(const std::string& param1) = 0;
                virtual Json::Value aec_getFilterChangesEx(const std::string& param1) = 0;
                virtual Json::Value aec_getFilterLogs(const std::string& param1) = 0;
                virtual Json::Value aec_getFilterLogsEx(const std::string& param1) = 0;
                virtual Json::Value aec_getLogs(const Json::Value& param1) = 0;
                virtual Json::Value aec_getLogsEx(const Json::Value& param1) = 0;
                virtual Json::Value aec_getWork() = 0;
                virtual bool aec_submitWork(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual bool aec_submitHashrate(const std::string& param1, const std::string& param2) = 0;
                virtual std::string aec_register(const std::string& param1) = 0;
                virtual bool aec_unregister(const std::string& param1) = 0;
                virtual Json::Value aec_fetchQueuedTransactions(const std::string& param1) = 0;
                virtual std::string aec_signTransaction(const Json::Value& param1) = 0;
                virtual Json::Value aec_inspectTransaction(const std::string& param1) = 0;
                virtual std::string aec_sendRawTransaction(const std::string& param1) = 0;
                virtual bool aec_notePassword(const std::string& param1) = 0;
                virtual Json::Value aec_syncing() = 0;
                virtual std::string aec_estimateGas(const Json::Value& param1) = 0;
                virtual std::string aec_chainId() = 0;
        };

    }
}
#endif //JSONRPC_CPP_STUB_DEV_RPC_aecFACE_H_
